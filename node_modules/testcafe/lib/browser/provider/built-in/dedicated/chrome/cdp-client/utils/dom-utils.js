"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getScrollingElement = exports.isBodyElement = exports.isHtmlElement = exports.findIframeByWindow = exports.getIFrameByIndex = exports.getIframeByElement = void 0;
const execution_context_1 = __importDefault(require("../execution-context"));
const index_1 = require("./index");
const clientsManager = __importStar(require("../clients-manager"));
async function getIframeByElement({ objectId }) {
    const { Runtime, DOM } = clientsManager.getClient();
    const frame = await Runtime.callFunctionOn({
        functionDeclaration: `function () {
            return this.ownerDocument.defaultView.frameElement
        }`,
        objectId,
    });
    if (frame.result.value !== null)
        return index_1.describeNode(DOM, frame.result.objectId || '');
    return null;
}
exports.getIframeByElement = getIframeByElement;
async function getIFrameByIndex(objectId, index) {
    const { Runtime, DOM } = clientsManager.getClient();
    const frame = await Runtime.callFunctionOn({
        functionDeclaration: `function (index) {
                return this[index];
            }`,
        objectId: objectId,
        arguments: [{ value: index }],
    });
    const frameObjectId = frame.result.objectId;
    if (frameObjectId)
        return index_1.describeNode(DOM, frameObjectId);
    return null;
}
exports.getIFrameByIndex = getIFrameByIndex;
async function findIframeByWindow(context) {
    const { Runtime } = clientsManager.getClient();
    const expression = `
        (function findIframes(parentDocument, result = []) {
            if (!parentDocument)
                return [];
        
            const children = parentDocument.querySelectorAll('iframe');
        
            for (const child of children) {
                result.push(child, ...findIframes(child.contentDocument));
            }
        
            return result;
        })(document);
   `;
    const frames = await Runtime.evaluate({ expression });
    let index = 0;
    let frame = await getIFrameByIndex(frames.result.objectId, index);
    while (frame) {
        if (context.frameId === frame.frameId)
            return frame;
        index++;
        frame = await getIFrameByIndex(frames.result.objectId, index);
    }
    return null;
}
exports.findIframeByWindow = findIframeByWindow;
function hasTagName(node, tagName) {
    return node.nodeName.toLowerCase() === tagName.toLowerCase();
}
function isHtmlElement(node) {
    return hasTagName(node, 'html');
}
exports.isHtmlElement = isHtmlElement;
function isBodyElement(node) {
    return hasTagName(node, 'body');
}
exports.isBodyElement = isBodyElement;
async function getScrollingElement(node) {
    const client = clientsManager.getClient();
    const args = {
        functionDeclaration: `function () {
            const doc = this !== window ? this.ownerDocument : document;
            
            return doc.scrollingElement;
        }`,
    };
    if (node)
        args.objectId = node.objectId;
    else
        args.executionContextId = execution_context_1.default.top.ctxId;
    const { result } = await client.Runtime.callFunctionOn(args);
    return index_1.describeNode(client.DOM, result.objectId || '');
}
exports.getScrollingElement = getScrollingElement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvcHJvdmlkZXIvYnVpbHQtaW4vZGVkaWNhdGVkL2Nocm9tZS9jZHAtY2xpZW50L3V0aWxzL2RvbS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsNkVBQW9EO0FBQ3BELG1DQUF1QztBQUN2QyxtRUFBcUQ7QUFHOUMsS0FBSyxVQUFVLGtCQUFrQixDQUFFLEVBQUUsUUFBUSxFQUFjO0lBQzlELE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsY0FBYyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBRXBELE1BQU0sS0FBSyxHQUFHLE1BQU0sT0FBTyxDQUFDLGNBQWMsQ0FBQztRQUN2QyxtQkFBbUIsRUFBRTs7VUFFbkI7UUFDRixRQUFRO0tBQ1gsQ0FBQyxDQUFDO0lBRUgsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxJQUFJO1FBQzNCLE9BQU8sb0JBQVksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUM7SUFFMUQsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQWRELGdEQWNDO0FBRU0sS0FBSyxVQUFVLGdCQUFnQixDQUFFLFFBQTRCLEVBQUUsS0FBYTtJQUMvRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLGNBQWMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUVwRCxNQUFNLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQyxjQUFjLENBQUM7UUFDdkMsbUJBQW1CLEVBQUU7O2NBRWY7UUFDTixRQUFRLEVBQUcsUUFBUTtRQUNuQixTQUFTLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQztLQUNoQyxDQUFDLENBQUM7SUFFSCxNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUU1QyxJQUFJLGFBQWE7UUFDYixPQUFPLG9CQUFZLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBRTVDLE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFqQkQsNENBaUJDO0FBRU0sS0FBSyxVQUFVLGtCQUFrQixDQUFFLE9BQXlCO0lBQy9ELE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxjQUFjLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFL0MsTUFBTSxVQUFVLEdBQUc7Ozs7Ozs7Ozs7Ozs7SUFhbkIsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDdEQsSUFBSSxLQUFLLEdBQU0sQ0FBQyxDQUFDO0lBQ2pCLElBQUksS0FBSyxHQUFNLE1BQU0sZ0JBQWdCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFckUsT0FBTyxLQUFLLEVBQUU7UUFDVixJQUFJLE9BQU8sQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDLE9BQU87WUFDakMsT0FBTyxLQUFLLENBQUM7UUFFakIsS0FBSyxFQUFFLENBQUM7UUFFUixLQUFLLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNqRTtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFoQ0QsZ0RBZ0NDO0FBRUQsU0FBUyxVQUFVLENBQUUsSUFBZ0IsRUFBRSxPQUFlO0lBQ2xELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDakUsQ0FBQztBQUVELFNBQWdCLGFBQWEsQ0FBRSxJQUFnQjtJQUMzQyxPQUFPLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUZELHNDQUVDO0FBRUQsU0FBZ0IsYUFBYSxDQUFFLElBQWdCO0lBQzNDLE9BQU8sVUFBVSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBRkQsc0NBRUM7QUFFTSxLQUFLLFVBQVUsbUJBQW1CLENBQUUsSUFBaUI7SUFDeEQsTUFBTSxNQUFNLEdBQUcsY0FBYyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBRTFDLE1BQU0sSUFBSSxHQUEyQztRQUNqRCxtQkFBbUIsRUFBRTs7OztVQUluQjtLQUNMLENBQUM7SUFFRixJQUFJLElBQUk7UUFDSixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7O1FBRTlCLElBQUksQ0FBQyxrQkFBa0IsR0FBRywyQkFBZ0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBRXpELE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTdELE9BQU8sb0JBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQW5CRCxrREFtQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvdG9jb2wgZnJvbSAnZGV2dG9vbHMtcHJvdG9jb2wvdHlwZXMvcHJvdG9jb2wnO1xuaW1wb3J0IEV4ZWN1dGlvbkNvbnRleHQgZnJvbSAnLi4vZXhlY3V0aW9uLWNvbnRleHQnO1xuaW1wb3J0IHsgZGVzY3JpYmVOb2RlIH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgKiBhcyBjbGllbnRzTWFuYWdlciBmcm9tICcuLi9jbGllbnRzLW1hbmFnZXInO1xuaW1wb3J0IHsgU2VydmVyTm9kZSB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldElmcmFtZUJ5RWxlbWVudCAoeyBvYmplY3RJZCB9OiBTZXJ2ZXJOb2RlKTogUHJvbWlzZTxTZXJ2ZXJOb2RlIHwgbnVsbD4ge1xuICAgIGNvbnN0IHsgUnVudGltZSwgRE9NIH0gPSBjbGllbnRzTWFuYWdlci5nZXRDbGllbnQoKTtcblxuICAgIGNvbnN0IGZyYW1lID0gYXdhaXQgUnVudGltZS5jYWxsRnVuY3Rpb25Pbih7XG4gICAgICAgIGZ1bmN0aW9uRGVjbGFyYXRpb246IGBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmZyYW1lRWxlbWVudFxuICAgICAgICB9YCxcbiAgICAgICAgb2JqZWN0SWQsXG4gICAgfSk7XG5cbiAgICBpZiAoZnJhbWUucmVzdWx0LnZhbHVlICE9PSBudWxsKVxuICAgICAgICByZXR1cm4gZGVzY3JpYmVOb2RlKERPTSwgZnJhbWUucmVzdWx0Lm9iamVjdElkIHx8ICcnKTtcblxuICAgIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SUZyYW1lQnlJbmRleCAob2JqZWN0SWQ6IHN0cmluZyB8IHVuZGVmaW5lZCwgaW5kZXg6IG51bWJlcik6IFByb21pc2U8U2VydmVyTm9kZSB8IG51bGw+IHtcbiAgICBjb25zdCB7IFJ1bnRpbWUsIERPTSB9ID0gY2xpZW50c01hbmFnZXIuZ2V0Q2xpZW50KCk7XG5cbiAgICBjb25zdCBmcmFtZSA9IGF3YWl0IFJ1bnRpbWUuY2FsbEZ1bmN0aW9uT24oe1xuICAgICAgICBmdW5jdGlvbkRlY2xhcmF0aW9uOiBgZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbaW5kZXhdO1xuICAgICAgICAgICAgfWAsXG4gICAgICAgIG9iamVjdElkOiAgb2JqZWN0SWQsXG4gICAgICAgIGFyZ3VtZW50czogW3sgdmFsdWU6IGluZGV4IH1dLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZnJhbWVPYmplY3RJZCA9IGZyYW1lLnJlc3VsdC5vYmplY3RJZDtcblxuICAgIGlmIChmcmFtZU9iamVjdElkKVxuICAgICAgICByZXR1cm4gZGVzY3JpYmVOb2RlKERPTSwgZnJhbWVPYmplY3RJZCk7XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRJZnJhbWVCeVdpbmRvdyAoY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCk6IFByb21pc2U8U2VydmVyTm9kZSB8IG51bGw+IHtcbiAgICBjb25zdCB7IFJ1bnRpbWUgfSA9IGNsaWVudHNNYW5hZ2VyLmdldENsaWVudCgpO1xuXG4gICAgY29uc3QgZXhwcmVzc2lvbiA9IGBcbiAgICAgICAgKGZ1bmN0aW9uIGZpbmRJZnJhbWVzKHBhcmVudERvY3VtZW50LCByZXN1bHQgPSBbXSkge1xuICAgICAgICAgICAgaWYgKCFwYXJlbnREb2N1bWVudClcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIFxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBwYXJlbnREb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpZnJhbWUnKTtcbiAgICAgICAgXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY2hpbGQsIC4uLmZpbmRJZnJhbWVzKGNoaWxkLmNvbnRlbnREb2N1bWVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pKGRvY3VtZW50KTtcbiAgIGA7XG5cbiAgICBjb25zdCBmcmFtZXMgPSBhd2FpdCBSdW50aW1lLmV2YWx1YXRlKHsgZXhwcmVzc2lvbiB9KTtcbiAgICBsZXQgaW5kZXggICAgPSAwO1xuICAgIGxldCBmcmFtZSAgICA9IGF3YWl0IGdldElGcmFtZUJ5SW5kZXgoZnJhbWVzLnJlc3VsdC5vYmplY3RJZCwgaW5kZXgpO1xuXG4gICAgd2hpbGUgKGZyYW1lKSB7XG4gICAgICAgIGlmIChjb250ZXh0LmZyYW1lSWQgPT09IGZyYW1lLmZyYW1lSWQpXG4gICAgICAgICAgICByZXR1cm4gZnJhbWU7XG5cbiAgICAgICAgaW5kZXgrKztcblxuICAgICAgICBmcmFtZSA9IGF3YWl0IGdldElGcmFtZUJ5SW5kZXgoZnJhbWVzLnJlc3VsdC5vYmplY3RJZCwgaW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBoYXNUYWdOYW1lIChub2RlOiBTZXJ2ZXJOb2RlLCB0YWdOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0h0bWxFbGVtZW50IChub2RlOiBTZXJ2ZXJOb2RlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGhhc1RhZ05hbWUobm9kZSwgJ2h0bWwnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQm9keUVsZW1lbnQgKG5vZGU6IFNlcnZlck5vZGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaGFzVGFnTmFtZShub2RlLCAnYm9keScpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2Nyb2xsaW5nRWxlbWVudCAobm9kZT86IFNlcnZlck5vZGUpOiBQcm9taXNlPFNlcnZlck5vZGU+IHtcbiAgICBjb25zdCBjbGllbnQgPSBjbGllbnRzTWFuYWdlci5nZXRDbGllbnQoKTtcblxuICAgIGNvbnN0IGFyZ3M6IFByb3RvY29sLlJ1bnRpbWUuQ2FsbEZ1bmN0aW9uT25SZXF1ZXN0ID0ge1xuICAgICAgICBmdW5jdGlvbkRlY2xhcmF0aW9uOiBgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgZG9jID0gdGhpcyAhPT0gd2luZG93ID8gdGhpcy5vd25lckRvY3VtZW50IDogZG9jdW1lbnQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBkb2Muc2Nyb2xsaW5nRWxlbWVudDtcbiAgICAgICAgfWAsXG4gICAgfTtcblxuICAgIGlmIChub2RlKVxuICAgICAgICBhcmdzLm9iamVjdElkID0gbm9kZS5vYmplY3RJZDtcbiAgICBlbHNlXG4gICAgICAgIGFyZ3MuZXhlY3V0aW9uQ29udGV4dElkID0gRXhlY3V0aW9uQ29udGV4dC50b3AuY3R4SWQ7XG5cbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gYXdhaXQgY2xpZW50LlJ1bnRpbWUuY2FsbEZ1bmN0aW9uT24oYXJncyk7XG5cbiAgICByZXR1cm4gZGVzY3JpYmVOb2RlKGNsaWVudC5ET00sIHJlc3VsdC5vYmplY3RJZCB8fCAnJyk7XG59XG4iXX0=